//Psudocode for "Our top 3 most popular product sorted from high to low".
Map countMap;
for each order in order map{
	prodId = order->item->productId
	countMap.contains(prodId){
		countMap.put(prodId,countMap.get(prodId)+1);
	}
	else{
		countMap.put(prodId,1);
	}
}

TreeMap rankMap<integer,arraylist>(comparator)
for each entry in countMap{
	if(rankMap.contains(entry.value)){
		rankMap.get(entry.value).add(entry.key);
	}
	else{
		arrList = new arraylist
		rankMap.put(entry.value,arrList.add(entry.key));
	}
}

for first 3 entries in rankMap{
	for each prodId in entry.value{
		print prodId;
	}
}
//----------------------------------------------------


//Psudocode for "Our 3 best customers"
Map revMap;
for each order in order map{
	customerId = order->customerId
	totalPrice = order.item.quantity*order.item.salesprice;
	revMap.contains(customerId){
		revMap.put(customerId,revMap.get(customerId)+totalPrice);
	}
	else{
		revMap.put(customerId,totalPrice);
	}
}

TreeMap rankMap<integer,arraylist>(comparator)
for each entry in countMap{
	if(rankMap.contains(entry.value)){
		rankMap.get(entry.value).add(entry.key);
	}
	else{
		arrList = new arraylist
		rankMap.put(entry.value,arrList.add(entry.key));
	}
}

for first 3 entries in rankMap{
	for each customerId in entry.value{
		print customerId;
	}
}


//-----------------------------------------------------------

//Psudocode for "Our 3 best salesperson"
Map revMap;
for each order in order map{
	supplierId = order->supplierId
	totalPrice = order.item.quantity*order.item.salesprice;
	revMap.contains(supplierId){
		revMap.put(supplierId,revMap.get(supplierId)+totalPrice);
	}
	else{
		revMap.put(supplierId,totalPrice);
	}
}

TreeMap rankMap<integer,arraylist>(comparator)
for each entry in countMap{
	if(rankMap.contains(entry.value)){
		rankMap.get(entry.value).add(entry.key);
	}
	else{
		arrList = new arraylist
		rankMap.put(entry.value,arrList.add(entry.key));
	}
}

for first 3 entries in rankMap{
	for each supplierId in entry.value{
		print supplierId;
	}
}
//----------------------------------------------------

//Our total revenue for the year
total =0;
for each order in order map{
	
	total = total + order.item.quantity * (order.item.salesprice - productMap.get(order.item.productId).min);
}

print total;